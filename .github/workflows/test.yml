name: Tests

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  test-python36:
    runs-on: ubuntu-latest
    container: python:3.6-slim-buster

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        apt-get update
        apt-get install -y gettext git

    - name: Install package with test dependencies
      run: |
        python -m pip install --upgrade pip --no-cache-dir
        pip install -e .[test] --no-cache-dir

    - name: Run Python 3.6 specific tests
      run: |
        echo "Testing package imports on Python 3.6..."
        python -c "import sys; print(f'Python version: {sys.version}')"
        python -c "import s3compat; print('s3compat package imported successfully')"
        python -c "import s3compat.osf_addon; print('OSF addon imported successfully')"

    - name: Test lazy loading functionality
      run: |
        echo "Testing lazy loading..."
        python -c "
        import s3compat
        print('Package loaded with lazy loading')
        print('OSF addon available:', hasattr(s3compat, 'osf_addon'))
        print('Waterbutler provider available:', hasattr(s3compat, 'waterbutler_provider'))
        "

    - name: Test entry points
      run: |
        echo "Testing entry points..."
        python -c "
        import pkg_resources
        osf_entries = list(pkg_resources.iter_entry_points('rdm.admin_integrations', 's3compat'))
        print(f'OSF admin integration entry points: {len(osf_entries)}')
        wb_entries = list(pkg_resources.iter_entry_points('waterbutler.providers', 's3compat'))
        print(f'Waterbutler provider entry points: {len(wb_entries)}')
        "

  test-modern-python:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gettext

    - name: Install package with test dependencies
      run: |
        python -m pip install --upgrade pip --no-cache-dir
        pip install -e .[test] --no-cache-dir

    - name: Run import tests
      run: |
        echo "Testing package imports..."
        python -c "import s3compat; print('s3compat package imported successfully')"
        python -c "import s3compat.osf_addon; print('OSF addon imported successfully')"

    - name: Test lazy loading functionality
      run: |
        echo "Testing lazy loading..."
        python -c "
        import s3compat
        print('Package loaded with lazy loading')
        # Test that osf_addon is accessible as attribute
        print('OSF addon available:', hasattr(s3compat, 'osf_addon'))
        # Test that waterbutler_provider is accessible as attribute  
        print('Waterbutler provider available:', hasattr(s3compat, 'waterbutler_provider'))
        "

    - name: Test entry points
      run: |
        echo "Testing entry points..."
        python -c "
        import pkg_resources
        # Test OSF admin integration entry point
        osf_entries = list(pkg_resources.iter_entry_points('rdm.admin_integrations', 's3compat'))
        print(f'OSF admin integration entry points: {len(osf_entries)}')
        if osf_entries:
            print(f'Entry point: {osf_entries[0].name} -> {osf_entries[0].module_name}')
        
        # Test Waterbutler provider entry point
        wb_entries = list(pkg_resources.iter_entry_points('waterbutler.providers', 's3compat'))
        print(f'Waterbutler provider entry points: {len(wb_entries)}')
        if wb_entries:
            print(f'Entry point: {wb_entries[0].name} -> {wb_entries[0].module_name}')
        "

    - name: Test package metadata
      run: |
        echo "Testing package metadata..."
        python -c "
        import pkg_resources
        dist = pkg_resources.get_distribution('s3compat')
        print(f'Package name: {dist.project_name}')
        print(f'Package version: {dist.version}')
        print(f'Package location: {dist.location}')
        "

    - name: Run unit tests (if available)
      run: |
        echo "Running unit tests..."
        if [ -d "tests" ]; then
          python -m pytest tests/ -v
        else
          echo "No tests directory found, running basic import tests"
          python test_import_without_waterbutler.py || echo "Import test completed"
        fi

  test-with-mock-dependencies:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.8
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gettext

    - name: Install package with dev dependencies
      run: |
        python -m pip install --upgrade pip --no-cache-dir
        pip install -e . --no-cache-dir[dev]

    - name: Test with mock boto (simulate OSF environment)
      run: |
        echo "Testing OSF addon functionality..."
        python -c "
        # Test that OSF addon can be imported without boto
        try:
            import s3compat.osf_addon
            print('OSF addon imported successfully without boto')
        except ImportError as e:
            print(f'Expected import behavior: {e}')
        "

    - name: Test with mock waterbutler (simulate waterbutler environment)
      run: |
        echo "Testing waterbutler provider functionality..."
        # Install minimal boto for testing
        pip install boto==2.49.0
        python -c "
        # Test that waterbutler provider imports work with boto available
        try:
            # Don't import waterbutler modules since they're not available
            # Just test the lazy loading mechanism
            import s3compat
            print('Package with lazy loading works correctly')
        except ImportError as e:
            print(f'Import error: {e}')
        "

  package-build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.8
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Test installation from built package
      run: |
        pip install dist/*.whl
        python -c "import s3compat; print('Package installed successfully from wheel')"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: package-dist
        path: dist/